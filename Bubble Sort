#include<iostream>
#include<omp.h>
#include<ctime>
using namespace std;


void bubble_seq(int arr[],int n){
    for(int i=0;i<n;i++){
        for(int j=i;j<n-1;j+=2){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
            }
        }
    }
}
void bubble_par(int arr[],int n){
    for(int i=0;i<n;i++){
        int first = i%2;

        #pragma omp parallel for
        for(int j=first;j<n-1;j+=2){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
            }
        }
    }
}

int main(){
    int arr[]={11,1,3,77,2,34};
    int n= sizeof(arr)/sizeof(arr[0]);

    double start_time,end_time;

    start_time = omp_get_wtime();
    bubble_seq(arr,n);
    end_time =  omp_get_wtime();
    cout<<"SEQUENTIAL TIME "<<end_time - start_time<<endl;
    
    start_time = omp_get_wtime();
    bubble_par(arr,n);
    end_time =  omp_get_wtime();
    cout<<"PARALLEL TIME "<<end_time - start_time<<endl;

    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}
