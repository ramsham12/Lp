# Define a graph as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

visited = set()  # Set to keep track of visited nodes

def bfs(queue):
    if not queue:
        return
    
    node = queue.pop(0)
    if node not in visited:
        print(node, end=' ')
        visited.add(node)
        for i in graph[node]:
            queue.append(i)
    bfs(queue)

# Starting BFS from node 'A'
queue = ['A']
bfs(queue)
#dfs
# Define a graph as an adjacency list
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

visited = set()  # Set to keep track of visited nodes

def dfs(node):
    if node not in visited:
        print(node, end=' ')
        visited.add(node)
        for neighbor in graph[node]:
            dfs(neighbor)

# Starting DFS from node 'A'
dfs('A')

          
