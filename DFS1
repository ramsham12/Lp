#include<iostream>
#include<omp.h>
#include<vector>

using namespace std;

const int N=6;
vector<int>graph[N];
bool visited[N];

void dfs(int node){
    if(!visited[node]){
        visited[node]=true;
        cout<<node<<" ";

        for(int neighbour : graph[node]){
            if(!visited[neighbour]){
                dfs(neighbour);
            }
        }
    }
}

int main(){

    graph[0]={1,2};
    graph[1]={0,3,4};
    graph[2]={0,5};
    graph[3]={1};
    graph[4]={1};
    graph[5]={2};

    fill(visited,visited+N,false);

    #pragma omp parallel for
    for(int i=0;i<N;i++){
        if(!visited[i]){
            #pragma omp critical
            {
                if(!visited[i]){
                    cout<<"DFS: ";
                    dfs(i);
                }
            }
        }
    }
    return 0;
}
