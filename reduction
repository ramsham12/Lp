#include<iostream>
#include<omp.h>

using namespace std;

    void min_reduction(int arr[],int n){
        int min_value = INT_MAX;
        #pragma omp parallel for reduction(min:min_value)
        for(int i=0;i<n;i++){
            min_value=arr[i];
        }
        cout<<"THE MINIMUM VALUE IS "<<min_value<<endl;
    }
    void max_reduction(int arr[],int n){
        int max_value = INT_MIN;
        #pragma omp parallel for reduction(max:max_value)
        for(int i=0;i<n;i++){
            max_value=arr[i];
        }
        cout<<"THE MAXIMUM VALUE IS "<<max_value<<endl;
    }
    void sum_reduction(int arr[],int n){
        int sum=0;
        #pragma omp parallel for reduction(+:sum)
        for(int i=0;i<n;i++){
            sum += arr[i];
        }
        cout<<"THE SUM VALUE IS "<<sum<<endl;
    }
    void avg_reduction(int arr[],int n){
        int sum=0;
        #pragma omp parallel for reduction(+:sum)
        for(int i=0;i<n;i++){
            sum += arr[i];
        }
        double avg = sum/n;
        cout<<"THE AVEREGE VALUE IS "<<avg<<endl;
    }

int main(){
    int arr[]={10,20,30,40,50,60,70,80,90,100};
    int n = 10;
    min_reduction(arr, n);
    max_reduction(arr, n);
    sum_reduction(arr, n);
    avg_reduction(arr, n);
}
