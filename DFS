#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;
const int N = 6;
vector<int> graph[N];
bool visited[N];
void dfs(int node) {
 visited[node] = true;
 cout << node << " ";
 for (int neighbor : graph[node]) {
 if (!visited[neighbor]) {
 dfs(neighbor);
 }
 }
}
int main() {
 // Example graph (undirected)
 graph[0] = {1, 2};
 graph[1] = {0, 3, 4};
 graph[2] = {0, 5};
 graph[3] = {1};
 graph[4] = {1};
 graph[5] = {2};
 fill(visited, visited + N, false);
 #pragma omp parallel for
 for (int i = 0; i < N; i++) {
 if (!visited[i]) {
 #pragma omp critical
 {
 if (!visited[i]) {
 cout << "Starting DFS at node: " << endl;
 dfs(i);
 }
 }
 }
 }
 return 0;
}
