#include<iostream>
#include<omp.h>
#include<vector>
#include<queue>

using namespace std;

const int N=6;
vector<int>graph[N];
bool visited[N];

void bfs(int start){
    queue<int>q;
    q.push(start);
    visited[start]=true;

    while(!q.empty()){
        int size = q.size();

        #pragma omp parallel for
        for(int i=0;i<size;i++){
            int node;
            #pragma omp critical
            {
                if(!q.empty()){
                    node=q.front();
                    q.pop();
                    cout<<node<<" ";
                }
            }
            for( int neighbour : graph[node]){
                #pragma omp critical 
                {
                    if(!visited[neighbour]){
                        visited[neighbour]=true;
                        q.push(neighbour);
                    }
                }
            }
        }
    }
}
int main(){
    graph[0]={1,2};
    graph[1]={0,3,4};
    graph[2]={0,5};
    graph[3]={1};
    graph[4]={1};
    graph[5]={2};

    fill(visited,visited+N,false);

    cout<<"THE bfs starts from node 0: ";
    bfs(0);
    return 0;
    
}
